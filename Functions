String Functions

SELECT CONCAT('Hello', ' ', 'World') AS concatenated_string;

SELECT SUBSTRING('Hello World', 7) AS substring_result;

SELECT UPPER('hello') AS upper_case_string;

SELECT LOWER('HELLO') AS lower_case_string;

SELECT LENGTH('Hello World') AS string_length;

Numeric Functions

SELECT ABS(-10) AS absolute_value;

SELECT ROUND(3.14159, 2) AS rounded_number;

SELECT FLOOR(9.99) AS floored_number;

SELECT CEIL(4.5) AS ceiling_value;

Date and Time Functions

SELECT NOW() AS current_datetime;

SELECT DATE_FORMAT(NOW(), '%Y-%m-%d') AS formatted_date;

SELECT DATEDIFF('2022-03-21', '2022-01-01') AS days_difference;

Aggregate Functions

SELECT customer_id, SUM(order_total) AS total_orders
FROM orders
GROUP BY customer_id;

SELECT customer_id, SUM(order_total) AS total_orders
FROM orders
GROUP BY customer_id
HAVING total_orders > 1000;

SQL Functions

SELECT customer_id, MIN(birthdate) AS oldest_customer
FROM customers;

SELECT SUM(amount) AS total_sales
FROM sales;


SELECT SOL_DESC,SOL_ID,ROW_NUMBER() OVER (ORDER BY SOL_ID DESC) AS rank
FROM BSBDS001;

SELECT  RANK() OVER (ORDER BY SOL_ID DESC) AS rank
FROM BSBDS001;

SELECT AVG(SOL_ID) OVER (PARTITION BY REGION_NAME) AS avg_sOL,SOL_DESC
FROM BSBDS002;


TO_CHAR: Converts a value of DATE, TIMESTAMP, or NUMBER datatype to a string.

SELECT TO_CHAR(SYSDATE, 'DD-MON-YYYY HH:MI:SS') AS current_date_time FROM dual;


TO_NUMBER: Converts a string into a number.

SELECT TO_NUMBER('123.45') AS number_value FROM dual;

TO_DATE: Converts a string to a DATE value.

SELECT TO_DATE('2024-03-12', 'YYYY-MM-DD') AS date_value FROM dual;  


NVL: This function replaces a null value with a specified value.

SELECT NVL(salary, 0) AS salary_with_default FROM employees;

NULLIF: This function returns null if two expressions are equal; otherwise, it returns the first expression.

SELECT NULLIF(salary, 0) AS salary_without_zero FROM employees;

COALESCE: This function returns the first non-null expression from a list of expressions.

SELECT COALESCE(salary, 0) AS salary_with_default FROM employees;

NVL:
Syntax: NVL(expr1, expr2)
Functionality: Returns expr2 if expr1 is null; otherwise, returns expr1.
Use Case: Typically used to replace null values with a default value.

NULLIF:
Syntax: NULLIF(expr1, expr2)
Functionality: Returns null if expr1 equals expr2; otherwise, returns expr1.
Use Case: Useful for setting a column to null if it has a specific value.

COALESCE:
Syntax: COALESCE(expr1, expr2, ...)
Functionality: Returns the first non-null expression from the list of expressions.
Use Case: Useful for selecting the first non-null value from a list of columns or expressions.


IF ELSE STATEMENT:
SELECT 
    employee_id,
    salary,
    CASE 
        WHEN salary > 50000 THEN 'High Salary'
        WHEN salary > 30000 THEN 'Moderate Salary'
        ELSE 'Low Salary'
    END AS salary_category
FROM 
    employees;

SELECT 
    DECODE(salary, 50000, 'High Salary', 30000, 'Moderate Salary', 'Low Salary') AS salary_category
FROM 
    employees;

NEST MULTIPLE FUNCTIONS
SELECT 
    UPPER(SUBSTR(REVERSE(column_name), 1, 3)) AS modified_column
FROM 
    your_table;

